/*

Table: Customers
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| customer_id   | int     |
| customer_name | varchar |
+---------------+---------+
customer_id is the primary key for this table.
Each row of this table contains the name and the id customer.

 
Write an SQL query to find the missing customer IDs. The missing IDs are ones that are not in the Customers table but are in the range between 1 and the maximum customer_id present in the table.
Notice that the maximum customer_id will not exceed 100.
Return the result table ordered by ids in ascending order.
The query result format is in the following example.
 
Customers table:
+-------------+---------------+
| customer_id | customer_name |
+-------------+---------------+
| 1           | Alice         |
| 4           | Bob           |
| 5           | Charlie       |
+-------------+---------------+

Result table:
+-----+
| ids |
+-----+
| 2   |
| 3   |
+-----+
The maximum customer_id present in the table is 5, so in the range [1,5], IDs 2 and 3 are missing from the table.

*/

WITH RECURSIVE numbers AS (
   SELECT 1 AS n
   union all
   SELECT n + 1
   FROM numbers
   WHERE n < (SELECT MAX(customer_id) FROM Customers)
)
SELECT numbers.n AS ids FROM Customers
RIGHT JOIN numbers ON numbers.n = Customers.customer_id
WHERE Customers.customer_id IS NULL

##### Comments
## For a dynamic start and dynamic finish
#WITH RECURSIVE numbers AS (
#   SELECT (SELECT MIN (customer_id) FROM Customers) AS n
#   union all
#   SELECT n + 1
#   FROM numbers
#   WHERE n < (SELECT MAX(customer_id) FROM Customers)
#)
#####
